/*
 * numerical.c
 * numerical.txc - Various numerical utilities
 *
 * Copyright (C) 2003 Patricio Rojo (pato@astro.cornell.edu)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */

#include <util/numerical.h>

/* \fcnfh
   Search for index such that val is between arr[index] inclusive and
   arr[index+1] exclusive.

   @returns index that is looked for
            -1 if value is before first element 'i' of array
	    -2 if value is after last element 'f' of array
	    -3 if only one element in array and it was not the looked
               one 
	    -4 if 'f' is equal or smaller than 'i', or 'i' is less than
	       0 
	    -5 if value is the last element of the array
*/
inline int
binsearchie(double *arr,	/* Array of length of at least 'f' */
	    long i,		/* initial search index, cannot be
				   negative */
	    long f,		/* final search index (or array
				   length minus 1) */
	    double val)		/* number to look for in the array */
{
  long m;

  if(arr[i]>val)
    return -1;
  if(arr[f]<val)
    return -2;
  if(arr[f]==val)
    return -5;
  if(i==f&&arr[i]!=val)
    return -3;
  if(f<i&&i<0)
    return -4;

  while(f-i>1){
    m=(f+i)>>1;
    if(arr[m]>val)
      f=m;
    else
      i=m;
  }

  return i;
}


/* \fcnfh
   Search for index such that val is between arr[index] exclusive and
   arr[index+1] inclusive.

   @returns index that is looked for
            -1 if value is before first element 'i' of array
	    -2 if value is after last element 'f' of array
	    -3 if only one element in array and it was not the looked
               one 
	    -4 if 'f' is equal or smaller than 'i', or 'i' is less than
	       0 
	    -6 if it is first index of the array
*/
inline int
binsearchei(double *arr,	/* Array of length of at least 'f' */
	    long i,		/* initial search index, cannot be
				   negative */
	    long f,		/* final search index (or array
				   length minus 1) */
	    double val)		/* number to look for in the array */
{
  long m;

  if(arr[i]>val)
    return -1;
  if(arr[i]==val)
    return -6;
  if(arr[f]<val)
    return -2;
  if(i==f&&arr[i]!=val)
    return -3;
  if(f<i&&i<0)
    return -4;

  while(f-i>1){
    m=(f+i)>>1;
    if(arr[m]<val)
      i=m;
    else
      f=m;
  }

  return i;
}

/*\fcnfh
  binsearch() defaults to an inclusive, exclusive search

  @return binsearchie findings.
*/
inline int 
binsearch(double *arr,
	  long i,
	  long f,
	  double val)
{
  return binsearchie(arr,i,f,val);
}


/* \fcnfh
   Integrate using simpson method and trapezoid at one interval if even
   number, it requires an equispaced x-grid

   @returns value of the integration
*/
inline double
integ_trasim(double dx,
	     double *y,
	     long n)
{
  double restrap=0,res=0;
  long i;

  if(n<2){
    fprintf(stderr,
	    "%s:: integ_trasim: At least 2 points are required to perform\n"
	    "integration\n"
	    ,__FILE__);
    exit(EXIT_FAILURE);
  }

  //use trapezoidal in the last even element
  if(!(n&1)){
    n--;
    restrap=.5*dx*(y[n]+y[n-1]);
  }

  //if there is enough elements do a Simpson integral
  if(n>2){
    //add the middle values, start with the odd elements which will be
    //multiplied by 4
    n--;
    for(i=1;i<n;i+=2)
      res+=y[i];
    res*=2;

    //now the even elements to be multiplied by 2
    for(i=2;i<n;i+=2)
      res+=y[i];
    res*=2;

    //now the borders
    res+=y[0]+y[n];
  }

  //finish'em
  return res*dx/3.0+restrap;
}
