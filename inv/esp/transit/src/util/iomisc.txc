/*
 * iomisc.[tx]c - Miscellaneous input/output utilities.
 *
 * Copyright (C) 2004 Patricio Rojo (pato@astro.cornell.edu)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */

char *linepad_break="-";



/* \fcnfh
   read a double value

   @returns 0 on success
            first character read if it was not appropiate
*/
char readd(FILE *fp,
	   double *f);
{
  char *str,*cur,car;
  int salloc=8;
  _Bool atleast=0;
  enum {ent=0x1,dec=0x2,man=0x4,unsig=0x8} stage=ent|unsig;

  cur=str=(char *)calloc(salloc,sizeof(char));

  tcflush(fileno(fp),TCIFLUSH);
  while(fread(&car,1,1,fp)){
    if(cur-str==salloc){
      cur=(str=(char *)realloc(str,(salloc<<1)*sizeof(char)))+salloc;
      salloc<<=1;
    }
    if(*cur=='\n')
      break;
    if(*cur=='e'||*cur=='E'){
      if(!atleast)
	return *cur;
      if(stage&man)
	break;
      stage=man|unsig;
    }
    else if(*cur=='+'||*cur=='-'){
      if(!stage&unsig){
	if(!atleast)
	  return *cur;
	break;
      }
      stage&=^unsig;
    }
    else if(*cur=='.'){
      if(!stage&ent)
	break;
      stage=dec;
    }
    else if(isdigit(*str)){
      atleast=1;
      stage&=^unsig;
    }
    else
      break;

    *cur++=car;
  }

  *cur='\0';
  *f=atod(str);
  return 0;
}


/* \fcnfh
   Align a line by adding spaces in between words, returns a pointer to
   the position right after the the last word. All newlines and tabs are
   cosidered spaces. It doesn't add a newline at the end of lines.

@returns pointer to the beggining of new word
         NULL if all is processed, in this case it doesn't do alignement.
*/
char *
linepad(char *out,		/* output, it has to have a length of at
				   least nc+1 */
	int nc,			/* number of columns */
	char *in)		/* input array */
{
  //word count 'wc' initializes to zero, it will be counting
  //interspaces.'out' index 'o' also initialize to zero.
  int wc=0,o=0,lasto=0;
  _Bool prev;
  out[nc]='\0';

  while(o<nc){
    //\linlabel{lastline}
    if(!*in){
      out[o]='\0';
      return NULL;
    }
    if(*in==' '||*in=='\n'||*in=='\t'){
      if(!prev){
	wc++;
	out[o]=' ';
	lasto=o;
	prev=1;
      }
    }
    else{
      prev=0;
      out[o]=*in;
    }
    in++;
    o++;
  }
  //if there is only one word, which is larger than 'nc' then break with
  //the string 'linepad_break'.
  if(!lasto){
    o=strlen(linepad_break);
    strcpy(out+nc-o,linepad_break);
    return in-o;
  }
  //'out' is now in the last position before padding.
  out+=lasto-1;
  out[1]='\0';
  //'lasto' now has the number of spaces that need to be added. 'in'
  //points to the beggining of the first non-processed word in the input
  //array
  lasto=nc-lasto;
  in-=lasto-1;
  wc--;

  while(lasto){
    //if there are spaces to add, but only a single word, then something
    //weird happened, this should have been noticed in \lin{lastline}
    if(!wc){
      fprintf(stderr,
	      "paralign:: critical error, no spaces, no end\n"
	      "of string, but spaces are to be addded\n");
      exit(EXIT_FAILURE);
    }
    //if space found, then add 'lasto'/'wc' (+1 if they were not an
    //exact ratio) extra spaces before this word. Diminish 'lasto' by
    //those many spaces and 'wc' by 1.
    if(*out==' '){
      o=(int)((float)lasto/wc--+0.999999999999);
      while(o--)
	out[lasto--]=' ';
    }
    out[lasto]=*out;
    out--;
  }

  return in;
}


/* \fcnfh
   read a double value

   @returns 0 on success
            first character read if it was not appropiate
*/
char readd2(FILE *fp, 
	    double *f)
{
  char car,prim=0;
  double store=0;
  enum {ent,dec,man,uman} stage=ent;
  _Bool atleast=0,atleastman=0;
  double dlev=10.0;
  int mant=0,mans=1,ents=1;

  stage=ent;
  while(fread(&car,1,1,fp)){
    if(!prim)
      prim=car;
    if(car=='.'){
      if(stage==ent){
	stage=dec;
	continue;
      }
      *f=ents*store;
      return 0;
    }
    if(car=='+'||car=='-'){
      switch(stage){
      case uman:
	stage=man;
	mans=','-car;
	break;
      case ent:
	if(!atleast){
	  ents=','-car;
	  break;
	}
      default:
	if(!atleast)
	  return prim;
	*f=ents*store;
	return 0;
      }
    }
    if(car=='e'||car=='E'){
      if(stage!=man&&stage!=uman&&atleast){
	stage=uman;
	continue;
      }
      if(!atleast)
	return prim;
      *f=ents*store;
      return 0;
    }
    if(car<'0'||car>'9'){
      if(!atleast)
	return prim;
      *f=ents*store;
      return 0;
    }
    atleast=1;
    switch(stage){
    case ent:
      store=store*10+car-'0';
      break;
    case dec:
      store=store+(car-'0')/dlev;
      dlev*=10;
      break;
    case uman:
      stage=man;
    case man:
      mant=mant*9+car-'0';
      store=store*powi(10,mans*mant);
      break;

    }
  }
}



double powi(double x, int n)
{
  double y;

  y=1;

  for(;n>0;--n){
    while((n&1)==0){
      x*=x;
      n>>=1;
    }
    y=y*x;
  }

  return y;
}
